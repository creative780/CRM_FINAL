"""
Django settings for crm_backend project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import environ
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Environment
env = environ.Env(
    DEBUG=(bool, True),
)
environ.Env.read_env(env_file=str(BASE_DIR / '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('DJANGO_SECRET_KEY', default='dev-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',

    # Third-party
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'drf_spectacular',
    'django_filters',
    'channels',

    # Local apps
    'accounts',
    'clients',
    'orders',
    'inventory',
    'delivery',
    'monitoring',
    'mediahub',
    'notifications',
    'hr',
    'attendance',
    'audit',
    'chat',
    'activity_log',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'crm_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crm_backend.wsgi.application'
ASGI_APPLICATION = 'crm_backend.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': env.db('DATABASE_URL', default=f'sqlite:///{BASE_DIR / "db.sqlite3"}')
}

AUTH_USER_MODEL = 'accounts.User'

# Internationalization


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

MEDIA_URL = env('MEDIA_URL', default='/uploads/')
MEDIA_ROOT = env('MEDIA_ROOT', default=str(BASE_DIR / 'media' / 'uploads'))

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# DRF
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'SIGNING_KEY': env('JWT_SIGNING_KEY', default=SECRET_KEY),
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'CRM Backend API',
    'DESCRIPTION': 'API for CRM frontend integration',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

# CORS
CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[
    'http://localhost:3000', 
    'http://127.0.0.1:3000',
    'http://localhost:8000',
    'http://127.0.0.1:8000'
])
CORS_ALLOW_ALL_ORIGINS = True  # Allow all origins for testing
CORS_ALLOW_CREDENTIALS = True
# Allow custom device header used by the frontend when checking in/out
from corsheaders.defaults import default_headers
CORS_ALLOW_HEADERS = list(default_headers) + [
    'x-device-id',
    'x-device-name',
    'authorization',
    'x-log-key',
    'x-log-signature',
    'x-request-id',
]

# Redis cache (for throttling/metrics)
CACHES = {
    'default': env.cache('REDIS_URL', default='locmemcache://')
}

# DRF throttling: basic defaults and burst control
REST_FRAMEWORK['DEFAULT_THROTTLE_CLASSES'] = [
    'rest_framework.throttling.AnonRateThrottle',
    'rest_framework.throttling.UserRateThrottle',
]
REST_FRAMEWORK['DEFAULT_THROTTLE_RATES'] = {
    'anon': env('THROTTLE_ANON', default='100/min'),
    'user': env('THROTTLE_USER', default='1000/min'),
}

# Celery
CELERY_BROKER_URL = env('CELERY_BROKER_URL', default=env('REDIS_URL', default='redis://localhost:6379/0'))
CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default=CELERY_BROKER_URL)
CELERY_TASK_ALWAYS_EAGER = env.bool('CELERY_TASK_ALWAYS_EAGER', default=False)

# Exports dir
EXPORTS_DIR = env('EXPORTS_DIR', default=str(BASE_DIR / 'media' / 'exports'))

# Channels
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [env('CHANNELS_REDIS_URL', default=env('REDIS_URL', default='redis://localhost:6379/1'))],
        },
    },
}

# Chat settings
MAX_ATTACHMENT_MB = env.int('MAX_ATTACHMENT_MB', default=10)

# Celery Beat schedule
CELERY_BEAT_SCHEDULE = {
    'cleanup-orphaned-uploads': {
        'task': 'chat.tasks.cleanup_orphaned_uploads',
        'schedule': 86400.0,  # Run daily (24 hours)
    },
    # Monitoring system tasks
    'cleanup-monitoring-data': {
        'task': 'monitoring.tasks.cleanup_old_monitoring_data',
        'schedule': 86400.0,  # Run daily (24 hours)
        'kwargs': {'days': 30},  # Retain data for 30 days
    },
    'generate-missing-thumbnails': {
        'task': 'monitoring.tasks.generate_missing_thumbnails',
        'schedule': 3600.0,  # Run hourly
    },
    'update-device-status': {
        'task': 'monitoring.tasks.update_device_status',
        'schedule': 300.0,  # Run every 5 minutes
    },
    'calculate-productivity-metrics': {
        'task': 'monitoring.tasks.calculate_productivity_metrics',
        'schedule': 3600.0,  # Run hourly
    },
    'send-idle-alerts': {
        'task': 'monitoring.tasks.send_idle_alerts',
        'schedule': 900.0,  # Run every 15 minutes
    },
}

# Monitoring system settings
MONITORING_STORAGE_PATH = env('MONITORING_STORAGE_PATH', default=str(BASE_DIR / 'monitoring_data'))
STORAGE_DRIVER = env('STORAGE_DRIVER', default='local')  # local or s3
JWT_SECRET = env('JWT_SECRET', default=SECRET_KEY)

# Monitoring logging configuration
import os
from pathlib import Path

# Ensure logs directory exists
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'json': {
            'format': '{"timestamp": "%(asctime)s", "logger": "%(name)s", "level": "%(levelname)s", "message": "%(message)s", "module": "%(module)s", "function": "%(funcName)s", "line": %(lineno)d}',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': str(LOGS_DIR / 'django.log'),
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'monitoring_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': str(LOGS_DIR / 'monitoring.log'),
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
            'formatter': 'json',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'monitoring': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'monitoring.heartbeat': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'monitoring.screenshot': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'monitoring.device': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'monitoring.analytics': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'monitoring.storage': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'monitoring.security': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'monitoring.performance': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'monitoring.cleanup': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'monitoring.websocket': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'monitoring.api': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# AWS S3 settings (if using S3 storage)
AWS_S3_BUCKET_NAME = env('AWS_S3_BUCKET_NAME', default=None)
AWS_S3_REGION = env('AWS_S3_REGION', default='us-east-1')
AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID', default=None)
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY', default=None)